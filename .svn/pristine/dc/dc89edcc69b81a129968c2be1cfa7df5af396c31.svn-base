package com.wen.util;

import org.springframework.core.MethodParameter;
import org.springframework.core.annotation.Order;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter;
import org.springframework.http.server.ServerHttpRequest;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;

@Order(0)
@ControllerAdvice
public class ResponseJsonAdvice implements ResponseBodyAdvice<Object>{

	@Override
	public boolean supports(MethodParameter returnType,
			Class<? extends HttpMessageConverter<?>> converterType) {
		// TODO Auto-generated method stub
		if(returnType.getMethod().toString().contains("swagger")) {
		      return false;
		    }
		    
	    return AbstractJackson2HttpMessageConverter.class.isAssignableFrom(converterType)
	        || StringHttpMessageConverter.class.isAssignableFrom(converterType);
	}

	@Override
	public Object beforeBodyWrite(Object body, MethodParameter returnType,MediaType selectedContentType,
			Class<? extends HttpMessageConverter<?>> selectedConverterType,
			ServerHttpRequest request, ServerHttpResponse response) {
		// TODO Auto-generated method stub
		if(!(body instanceof RestResult)){
			RestResult restResult =new RestResult();
			if (body instanceof Exception) {
				restResult.setStatus(500);
				restResult.setMessage(((Exception) body).getMessage());
			} else {
				restResult.setStatus(200);
				restResult.setData(body);
			}
			/*if (body instanceof String) {
				body = restResult.toString();
			} else {
				body = restResult;
			}*/
			return restResult;
		}
		
		return body;
	}

	@ExceptionHandler(Exception.class)
	public ResponseEntity<Object> handleException(Exception exception) {
		//交给MappingJackson2HttpMessageConverter处理(ResponseBodyJsonAdvice)
	    return new ResponseEntity<Object>(exception, null, HttpStatus.OK);
	}
}
